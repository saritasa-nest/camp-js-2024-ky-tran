var R=Object.defineProperty;var D=(t,s,e)=>s in t?R(t,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[s]=e;var i=(t,s,e)=>D(t,typeof s!="symbol"?s+"":s,e);import"./modulepreload-polyfill-B5Qt9EMX.js";function p(t){if(!t)throw new Error("Element not found!");return t}function l(t){const s=document.querySelector(t);return p(s)}function c(t){return document.querySelectorAll(t)}function h(t){return function(s){const e=t.querySelector(s);return p(e)}}function E(t,s){const e=new Uint32Array(1);window.crypto.getRandomValues(e);const n=e[0]/4294967296;return Math.floor(n*(s-t+1))+t}function f(t){return t.reduce((s,e)=>s+e,0)}const o=2,A=6,y=0,T=21;class v{constructor(){i(this,"containerEl",l(".debug-user"))}generateMarkup(){return`
			<div class="block">
				<div class="user__info">
					<h2 class="user__info-name">All Dice Rolls</h2>
					<span class="user__info-dash">&mdash;</span>
					<span class="user__info-result font-bold">0</span>
				</div>
				<div class="sub-block font-small main__all-rolls">Let's make a move</div>
			</div>
		`}update(){this.containerEl.insertAdjacentHTML("beforeend",this.generateMarkup())}}class P{constructor(){i(this,"containerEl",l(".users"))}generateMarkup(s){return`
			<div class="block user ${s===y&&"active"}">
				<div class="user__info">
					<h2 class="user__info-name">Player ${s+1}</h2>
					<span class="user__info-dash">&mdash;</span>
					<span class="user__info-result font-bold">0</span>
					<span class="user__info-in-turn font-semibold">In turn</span>
				</div>
				<div class="sub-block font-small user__results">0</div>
			</div>
		`}update({playerIndex:s}){this.containerEl.insertAdjacentHTML("beforeend",this.generateMarkup(s))}}class b{render({diceResults:s,targetEl:e,resultsClass:n,infoResultClass:r}){const d=h(e)(`.${n}`),u=h(e)(`.${r}`);d.innerHTML=s.join(", "),u.innerHTML=f(s).toString()}}class S extends b{update({diceResults:s}){const e=l(".debug-user");this.render({diceResults:s,targetEl:e,resultsClass:"main__all-rolls",infoResultClass:"user__info-result"})}}class x extends b{update({playerIndex:s,diceResults:e}){const n=c(".user")[s];this.render({diceResults:e,targetEl:n,resultsClass:"user__results",infoResultClass:"user__info-result"})}}class I{update({playerIndex:s,isWin:e}){if(e){const n=c(".user")[s];n.classList.contains("winner")||n.classList.add("winner")}}}class L{update({inTurnIndex:s}){const e=c(".user"),n=e[s];e.forEach(r=>r.classList.remove("active")),n.classList.add("active")}}class g{constructor(){i(this,"turnGenerator",new k(o));i(this,"diceGenerator",new M(A));this.turnGenerator.subscribe(this.diceGenerator),this.createAdmin(),this.createPlayers()}createAdmin(){const s=new v,e=new S,n={displayerInstances:{initialAdminDisplayer:s,resultsAdminDisplayer:e}},r=new C(n);this.diceGenerator.subscribe(r)}createPlayers(){const s=new P,e=new x,n=new I,r=new L;Array.from({length:o}).map((d,u)=>{const m={selfIndex:u,displayerInstances:{initialPlayerDisplayer:s,resultsPlayerDisplayer:e,winStatusDisplayer:n,inTurnDisplayer:r}},w=new G(m);this.diceGenerator.subscribe(w)})}run(){this.turnGenerator.next()}}class a{constructor(){i(this,"subscribers",new Set)}subscribe(s){this.subscribers.add(s)}unsubscribe(s){this.subscribers.delete(s)}notify(s){this.subscribers.forEach(e=>e.update(s))}}class k extends a{constructor(s,e=y){super(),this.playersCount=s,this.currentPlayerIndex=e}next(){this.notify(this.currentPlayerIndex),this.currentPlayerIndex=(this.currentPlayerIndex+1)%this.playersCount}}class M extends a{constructor(s){super(),this.sidesCount=s}roll(){return E(1,this.sidesCount)}update(s){this.notify({playerIndex:s,diceResult:this.roll()})}}class _{constructor(){i(this,"diceResults",[]);i(this,"results",new a)}}class C extends _{constructor({displayerInstances:e}){super();i(this,"initial",new a);this.initial.subscribe(e.initialAdminDisplayer),this.results.subscribe(e.resultsAdminDisplayer),this.initial.notify(null)}update({playerIndex:e,diceResult:n}){this.diceResults.push(n),this.results.notify({playerIndex:e,diceResults:this.diceResults})}}class G extends _{constructor({selfIndex:e,winnerDiceTotalResult:n,displayerInstances:r}){super();i(this,"selfIndex");i(this,"winnerDiceTotalResult",T);i(this,"initial",new a);i(this,"winStatus",new a);i(this,"inTurn",new a);this.selfIndex=e,n!==void 0&&(this.winnerDiceTotalResult=n),this.initial.subscribe(r.initialPlayerDisplayer),this.results.subscribe(r.resultsPlayerDisplayer),this.winStatus.subscribe(r.winStatusDisplayer),this.inTurn.subscribe(r.inTurnDisplayer),this.initial.notify({playerIndex:this.selfIndex})}update({playerIndex:e,diceResult:n}){e===this.selfIndex&&(this.diceResults.push(n),this.results.notify({playerIndex:e,diceResults:this.diceResults}),this.winStatus.notify({playerIndex:e,isWin:f(this.diceResults)>=this.winnerDiceTotalResult}),this.inTurn.notify({inTurnIndex:(e+1)%o}))}}window.onload=function(){const t=new g,s=l(".make-a-move");s&&(s.onclick=function(){t.run()})};
