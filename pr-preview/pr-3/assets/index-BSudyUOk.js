var m=Object.defineProperty;var y=(t,s,e)=>s in t?m(t,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[s]=e;var r=(t,s,e)=>y(t,typeof s!="symbol"?s+"":s,e);import"./modulepreload-polyfill-B5Qt9EMX.js";function d(t){if(!t)throw new Error("Element not found!");return t}function a(t){const s=document.querySelector(t);return d(s)}function c(t){return document.querySelectorAll(t)}function o(t){return function(s){const e=t.querySelector(s);return d(e)}}function w(t,s){const e=new Uint32Array(1);window.crypto.getRandomValues(e);const n=e[0]/4294967296;return Math.floor(n*(s-t+1))+t}function h(t){return t.reduce((s,e)=>s+e,0)}const l=2,R=6,x=21;class E{constructor(){r(this,"turnGenerator");r(this,"diceGenerator");this.turnGenerator=new I(l),this.diceGenerator=new v(R),this.turnGenerator.subscribe(this.diceGenerator),this.createAdmin(),this.createPlayers()}createAdmin(){const s=new L;this.diceGenerator.subscribe(s)}createPlayers(){Array.from({length:l}).map((s,e)=>{const n=new P(e,x);this.diceGenerator.subscribe(n)})}start(){this.turnGenerator.next()}}class i{constructor(){r(this,"subscribers",[])}subscribe(s){this.getSubscriberIndex(s)===-1&&this.subscribers.push(s)}unsubscribe(s){const e=this.getSubscriberIndex(s);e!==-1&&this.subscribers.splice(e,1)}notify(s){this.subscribers.forEach(e=>e.update(s))}getSubscriberIndex(s){return this.subscribers.findIndex(e=>e===s)}}class I extends i{constructor(s,e=0){super(),this.playersCount=s,this.currentPlayerIndex=e}next(){this.notify(this.currentPlayerIndex),this.currentPlayerIndex=(this.currentPlayerIndex+1)%this.playersCount}}class v extends i{constructor(s){super(),this.sidesCount=s}roll(){return w(1,this.sidesCount)}update(s){this.notify({playerIndex:s,diceResult:this.roll()})}}class T{constructor(){r(this,"containerEl",a(".debug-user"))}generateMarkup(){return`
			<div class="block">
				<div class="user__info">
					<h2 class="user__info-name">All Dice Rolls</h2>
					<span class="user__info-dash">&mdash;</span>
					<span class="user__info-result font-bold">0</span>
				</div>
				<div class="sub-block font-small main__all-rolls">Let's make a move</div>
			</div>
		`}update(){var e;const s=this.generateMarkup();(e=this.containerEl)==null||e.insertAdjacentHTML("beforeend",s)}}class A{constructor(){r(this,"containerEl",a(".users"))}generateMarkup(s){return`
			<div class="block user ${s===0&&"active"}">
				<div class="user__info">
					<h2 class="user__info-name">Player ${s+1}</h2>
					<span class="user__info-dash">&mdash;</span>
					<span class="user__info-result font-bold">0</span>
					<span class="user__info-in-turn font-semibold">In turn</span>
				</div>
				<div class="sub-block font-small user__results">0</div>
			</div>
		`}update({playerIndex:s}){var n;const e=this.generateMarkup(s);(n=this.containerEl)==null||n.insertAdjacentHTML("beforeend",e)}}class S{update({playerIndex:s,isWin:e}){if(e){const n=c(".user")[s];n.classList.contains("class")||n.classList.add("winner")}}}class g{update({inTurnIndex:s}){const e=c(".user"),n=e[s];e.forEach(u=>u.classList.remove("active")),n.classList.add("active")}}class f{render({diceResults:s,targetEl:e,resultsClass:n,infoResultClass:u}){const p=o(e)(`.${n}`),_=o(e)(`.${u}`);p.innerHTML=s.join(", "),_.innerHTML=h(s).toString()}}class k extends f{update({diceResults:s}){const e=a(".debug-user");this.render({diceResults:s,targetEl:e,resultsClass:"main__all-rolls",infoResultClass:"user__info-result"})}}class D extends f{update({playerIndex:s,diceResults:e}){const n=c(".user")[s];this.render({diceResults:e,targetEl:n,resultsClass:"user__results",infoResultClass:"user__info-result"})}}class b{constructor(){r(this,"diceResults",[]);r(this,"results",new i)}}class L extends b{constructor(){super();r(this,"initial",new i);this.initial.subscribe(new T),this.results.subscribe(new k),this.initial.notify(null)}update({playerIndex:e,diceResult:n}){this.diceResults.push(n),this.results.notify({playerIndex:e,diceResults:this.diceResults})}}class P extends b{constructor(e,n){super();r(this,"initial",new i);r(this,"winStatus",new i);r(this,"inTurn",new i);this.selfIndex=e,this.winnerDiceTotalResult=n,this.initial.subscribe(new A),this.results.subscribe(new D),this.winStatus.subscribe(new S),this.inTurn.subscribe(new g),this.initial.notify({playerIndex:this.selfIndex})}update({playerIndex:e,diceResult:n}){e===this.selfIndex&&(this.diceResults.push(n),this.results.notify({playerIndex:e,diceResults:this.diceResults}),this.winStatus.notify({playerIndex:e,isWin:h(this.diceResults)>=this.winnerDiceTotalResult}),this.inTurn.notify({inTurnIndex:(e+1)%l}))}}window.onload=function(){const t=new E,s=a(".make-a-move");s&&(s.onclick=function(){t.start()})};
